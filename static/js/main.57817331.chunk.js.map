{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","createTodo","id","uuidv4","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","onClick","class","TodoList","todos","create","remove","update","toggleComplete","newTodo","filter","todo","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57817331.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\n    this.setState({ task: '' });\n  }\n  render() {\n    return (\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\">New Todo</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add new item\"\n          value={this.state.task}\n          onChange={this.handleChange}\n          name=\"task\"\n        ></input>\n        <button>Add Todo</button>\n      </form>\n    );\n  }\n}\nexport default NewTodoForm;\n","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task,\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.toggleForm();\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div className=\"Todo\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <input\n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              onChange={this.handleChange}\n            ></input>\n            <button>Save</button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div className=\"Todo\">\n          <li\n            className={\n              this.props.completed ? 'Todo-task completed' : 'Todo-task'\n            }\n            onClick={this.handleToggle}\n          >\n            {this.props.task}\n          </li>\n          <div className=\"Todo-buttons\">\n            <button onClick={this.toggleForm}>\n              <i class=\"fas fa-pen\" />\n            </button>\n            <button onClick={this.handleRemove}>\n              <i class=\"fas fa-trash\" />\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return result;\n  }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n  }\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo],\n    });\n  }\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter((todo) => todo.id !== id),\n    });\n  }\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  toggleComplete(id) {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  render() {\n    const todos = this.state.todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        id={todo.id}\n        task={todo.task}\n        removeTodo={this.remove}\n        updateTodo={this.update}\n        completed={todo.completed}\n        toggleTodo={this.toggleComplete}\n      />\n    ));\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          Todo List<span>React App</span>\n        </h1>\n        <ul>{todos}</ul>\n        <NewTodoForm createTodo={this.create} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}